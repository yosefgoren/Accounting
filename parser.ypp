%{
	int yylex();
	void yyerror(const char* s);
	#include <stdio.h>
	#include <iostream>
	#include <string>
	#include "accounting_aux.hpp"
	#include "Accountant.hpp"
	#include "assert.h"
	extern int yylineno;
	using namespace std;

	//#define MYDB
	#ifdef MYDB
		#define YYERROR_VERBOSE 1
		#define YYDEBUG 1
		extern int yydebug;
	#endif
	
	Document* global_document_data = nullptr;
%}

%union{
	//lexer proivided fields:
	std::string* id;
	double number;
	
	//parser metadata fields:
	Document* document;
	vector<PricedItem>* priced_items;
	vector<Participant>* participants;
	vector<string*>* wanted_list;
	bool disqualify_list;
};

%token <id> PARTICIPANT_ID ITEM_ID
%token <number> NUMBER
%token NOT

%type <document> Document
%type <priced_items> PricedItemList
%type <participants> Participants
%type <wanted_list> ItemIdList
%type <disqualify_list> SelectionModefier

%%
Document:			PricedItemList Participants {global_document_data = new Document($1, $2);};

PricedItemList:		ITEM_ID NUMBER PricedItemList {
						assert($3 != nullptr);
						$3->push_back(PricedItem($1, $2));
						$$ = $3;
					}
					| {$$ = new vector<PricedItem>();}
					;

Participants:		PARTICIPANT_ID SelectionModefier ItemIdList Participants {
						assert($4 != nullptr);
						$4->push_back(Participant($1, $3, $2));
						$$ = $4;
					}
					| {$$ = new vector<Participant>();}
					;

SelectionModefier:	NOT {$$ = true;}
					| {$$ = false;}
					;
					
ItemIdList:			ITEM_ID ItemIdList {
						assert($2 != nullptr);
						$2->push_back($1);
						$$ = $2;
					}
					| {$$ = new vector<string*>();}
					;
%%

void yyerror(const char* s){
	printf("syntax error. line %d\n", yylineno);
	exit(1);
}

int main(){
	#ifdef MYDB
		yydebug = 1;
	#endif
	yyparse();
	Accountant accountant(*global_document_data);
	accountant.printCostsPerParticipant();
	cout << "document evaluation complete." << endl;
	return 0;
}